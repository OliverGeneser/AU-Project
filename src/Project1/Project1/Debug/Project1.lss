
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000630  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  000006a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ac  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f9a  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b5  00000000  00000000  00002f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000766  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004fd  00000000  00000000  000042f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000047ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	87 c0       	rjmp	.+270    	; 0x110 <__ctors_end>
   2:	00 00       	nop
   4:	77 c1       	rjmp	.+750    	; 0x2f4 <__vector_1>
   6:	00 00       	nop
   8:	ef c1       	rjmp	.+990    	; 0x3e8 <__vector_2>
   a:	00 00       	nop
   c:	a0 c0       	rjmp	.+320    	; 0x14e <__bad_interrupt>
   e:	00 00       	nop
  10:	9e c0       	rjmp	.+316    	; 0x14e <__bad_interrupt>
  12:	00 00       	nop
  14:	9c c0       	rjmp	.+312    	; 0x14e <__bad_interrupt>
  16:	00 00       	nop
  18:	9a c0       	rjmp	.+308    	; 0x14e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	98 c0       	rjmp	.+304    	; 0x14e <__bad_interrupt>
  1e:	00 00       	nop
  20:	96 c0       	rjmp	.+300    	; 0x14e <__bad_interrupt>
  22:	00 00       	nop
  24:	94 c0       	rjmp	.+296    	; 0x14e <__bad_interrupt>
  26:	00 00       	nop
  28:	92 c0       	rjmp	.+292    	; 0x14e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	90 c0       	rjmp	.+288    	; 0x14e <__bad_interrupt>
  2e:	00 00       	nop
  30:	8e c0       	rjmp	.+284    	; 0x14e <__bad_interrupt>
  32:	00 00       	nop
  34:	8c c0       	rjmp	.+280    	; 0x14e <__bad_interrupt>
  36:	00 00       	nop
  38:	8a c0       	rjmp	.+276    	; 0x14e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	88 c0       	rjmp	.+272    	; 0x14e <__bad_interrupt>
  3e:	00 00       	nop
  40:	86 c0       	rjmp	.+268    	; 0x14e <__bad_interrupt>
  42:	00 00       	nop
  44:	84 c0       	rjmp	.+264    	; 0x14e <__bad_interrupt>
  46:	00 00       	nop
  48:	82 c0       	rjmp	.+260    	; 0x14e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	80 c0       	rjmp	.+256    	; 0x14e <__bad_interrupt>
  4e:	00 00       	nop
  50:	7e c0       	rjmp	.+252    	; 0x14e <__bad_interrupt>
  52:	00 00       	nop
  54:	7c c0       	rjmp	.+248    	; 0x14e <__bad_interrupt>
  56:	00 00       	nop
  58:	7a c0       	rjmp	.+244    	; 0x14e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	78 c0       	rjmp	.+240    	; 0x14e <__bad_interrupt>
  5e:	00 00       	nop
  60:	76 c0       	rjmp	.+236    	; 0x14e <__bad_interrupt>
  62:	00 00       	nop
  64:	74 c0       	rjmp	.+232    	; 0x14e <__bad_interrupt>
  66:	00 00       	nop
  68:	72 c0       	rjmp	.+228    	; 0x14e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	70 c0       	rjmp	.+224    	; 0x14e <__bad_interrupt>
  6e:	00 00       	nop
  70:	6e c0       	rjmp	.+220    	; 0x14e <__bad_interrupt>
  72:	00 00       	nop
  74:	6c c0       	rjmp	.+216    	; 0x14e <__bad_interrupt>
  76:	00 00       	nop
  78:	6a c0       	rjmp	.+212    	; 0x14e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	68 c0       	rjmp	.+208    	; 0x14e <__bad_interrupt>
  7e:	00 00       	nop
  80:	66 c0       	rjmp	.+204    	; 0x14e <__bad_interrupt>
  82:	00 00       	nop
  84:	64 c0       	rjmp	.+200    	; 0x14e <__bad_interrupt>
  86:	00 00       	nop
  88:	62 c0       	rjmp	.+196    	; 0x14e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c7 c0       	rjmp	.+398    	; 0x21c <__vector_35>
  8e:	00 00       	nop
  90:	5e c0       	rjmp	.+188    	; 0x14e <__bad_interrupt>
  92:	00 00       	nop
  94:	5c c0       	rjmp	.+184    	; 0x14e <__bad_interrupt>
  96:	00 00       	nop
  98:	5a c0       	rjmp	.+180    	; 0x14e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	58 c0       	rjmp	.+176    	; 0x14e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	56 c0       	rjmp	.+172    	; 0x14e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	54 c0       	rjmp	.+168    	; 0x14e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	52 c0       	rjmp	.+164    	; 0x14e <__bad_interrupt>
  aa:	00 00       	nop
  ac:	50 c0       	rjmp	.+160    	; 0x14e <__bad_interrupt>
  ae:	00 00       	nop
  b0:	4e c0       	rjmp	.+156    	; 0x14e <__bad_interrupt>
  b2:	00 00       	nop
  b4:	4c c0       	rjmp	.+152    	; 0x14e <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4a c0       	rjmp	.+148    	; 0x14e <__bad_interrupt>
  ba:	00 00       	nop
  bc:	48 c0       	rjmp	.+144    	; 0x14e <__bad_interrupt>
  be:	00 00       	nop
  c0:	46 c0       	rjmp	.+140    	; 0x14e <__bad_interrupt>
  c2:	00 00       	nop
  c4:	44 c0       	rjmp	.+136    	; 0x14e <__bad_interrupt>
  c6:	00 00       	nop
  c8:	42 c0       	rjmp	.+132    	; 0x14e <__bad_interrupt>
  ca:	00 00       	nop
  cc:	40 c0       	rjmp	.+128    	; 0x14e <__bad_interrupt>
  ce:	00 00       	nop
  d0:	3e c0       	rjmp	.+124    	; 0x14e <__bad_interrupt>
  d2:	00 00       	nop
  d4:	3c c0       	rjmp	.+120    	; 0x14e <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3a c0       	rjmp	.+116    	; 0x14e <__bad_interrupt>
  da:	00 00       	nop
  dc:	38 c0       	rjmp	.+112    	; 0x14e <__bad_interrupt>
  de:	00 00       	nop
  e0:	36 c0       	rjmp	.+108    	; 0x14e <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a2 01       	movw	r20, r4
  e6:	a5 01       	movw	r20, r10
  e8:	ab 01       	movw	r20, r22
  ea:	b1 01       	movw	r22, r2
  ec:	d3 01       	movw	r26, r6
  ee:	ba 01       	movw	r22, r20
  f0:	d3 01       	movw	r26, r6
  f2:	c4 01       	movw	r24, r8
  f4:	d3 01       	movw	r26, r6
  f6:	d3 01       	movw	r26, r6
  f8:	ce 01       	movw	r24, r28
  fa:	1c 02       	muls	r17, r28
  fc:	1f 02       	muls	r17, r31
  fe:	25 02       	muls	r18, r21
 100:	2b 02       	muls	r18, r27
 102:	4d 02       	muls	r20, r29
 104:	34 02       	muls	r19, r20
 106:	4d 02       	muls	r20, r29
 108:	3e 02       	muls	r19, r30
 10a:	4d 02       	muls	r20, r29
 10c:	4d 02       	muls	r20, r29
 10e:	48 02       	muls	r20, r24

00000110 <__ctors_end>:
 110:	11 24       	eor	r1, r1
 112:	1f be       	out	0x3f, r1	; 63
 114:	cf ef       	ldi	r28, 0xFF	; 255
 116:	d1 e2       	ldi	r29, 0x21	; 33
 118:	de bf       	out	0x3e, r29	; 62
 11a:	cd bf       	out	0x3d, r28	; 61
 11c:	00 e0       	ldi	r16, 0x00	; 0
 11e:	0c bf       	out	0x3c, r16	; 60

00000120 <__do_copy_data>:
 120:	12 e0       	ldi	r17, 0x02	; 2
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b2 e0       	ldi	r27, 0x02	; 2
 126:	e0 e3       	ldi	r30, 0x30	; 48
 128:	f6 e0       	ldi	r31, 0x06	; 6
 12a:	00 e0       	ldi	r16, 0x00	; 0
 12c:	0b bf       	out	0x3b, r16	; 59
 12e:	02 c0       	rjmp	.+4      	; 0x134 <__do_copy_data+0x14>
 130:	07 90       	elpm	r0, Z+
 132:	0d 92       	st	X+, r0
 134:	a0 30       	cpi	r26, 0x00	; 0
 136:	b1 07       	cpc	r27, r17
 138:	d9 f7       	brne	.-10     	; 0x130 <__do_copy_data+0x10>

0000013a <__do_clear_bss>:
 13a:	22 e0       	ldi	r18, 0x02	; 2
 13c:	a0 e0       	ldi	r26, 0x00	; 0
 13e:	b2 e0       	ldi	r27, 0x02	; 2
 140:	01 c0       	rjmp	.+2      	; 0x144 <.do_clear_bss_start>

00000142 <.do_clear_bss_loop>:
 142:	1d 92       	st	X+, r1

00000144 <.do_clear_bss_start>:
 144:	aa 30       	cpi	r26, 0x0A	; 10
 146:	b2 07       	cpc	r27, r18
 148:	e1 f7       	brne	.-8      	; 0x142 <.do_clear_bss_loop>
 14a:	c8 d1       	rcall	.+912    	; 0x4dc <main>
 14c:	6f c2       	rjmp	.+1246   	; 0x62c <_exit>

0000014e <__bad_interrupt>:
 14e:	58 cf       	rjmp	.-336    	; 0x0 <__vectors>

00000150 <checkSum>:
	
	sendAudio();
}

void checkSum(){
	unsigned int sum = 0xFFFF-(soundCMD+soundFeedback+soundPara1+soundPara2)+1; //Checksum 16 bit gemmes i en variabel vha. formlen fra databladet
 150:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <soundCMD>
 154:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <soundPara1>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	82 0f       	add	r24, r18
 15c:	91 1d       	adc	r25, r1
 15e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 162:	82 0f       	add	r24, r18
 164:	91 1d       	adc	r25, r1
 166:	91 95       	neg	r25
 168:	81 95       	neg	r24
 16a:	91 09       	sbc	r25, r1
	
	checkSum2 = sum % 256; //Find de 8 mindst betydede cifre
 16c:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <checkSum2>
	checkSum1 = (sum - checkSum2) / 256; //Find de 8 mest betydende cifre
 170:	88 1b       	sub	r24, r24
 172:	91 09       	sbc	r25, r1
 174:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <checkSum1>
 178:	08 95       	ret

0000017a <sendAudio>:
	sendAudio();
}

void sendAudio() {
	// Sends a 1 byte code to the SOMO 8 times
	checkSum(); //Checksum kaldes for at finde de rigtige værdier til checksum1 og checksum2
 17a:	ea df       	rcall	.-44     	; 0x150 <checkSum>
	SendChar(soundStart);
 17c:	8e e7       	ldi	r24, 0x7E	; 126
 17e:	25 d2       	rcall	.+1098   	; 0x5ca <SendChar>
	SendChar(soundCMD);
 180:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <soundCMD>
	SendChar(soundFeedback);
 184:	22 d2       	rcall	.+1092   	; 0x5ca <SendChar>
 186:	80 e0       	ldi	r24, 0x00	; 0
	SendChar(soundPara1);
 188:	20 d2       	rcall	.+1088   	; 0x5ca <SendChar>
 18a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <soundPara1>
	SendChar(soundPara2);
 18e:	1d d2       	rcall	.+1082   	; 0x5ca <SendChar>
 190:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	SendChar(checkSum1);
 194:	1a d2       	rcall	.+1076   	; 0x5ca <SendChar>
 196:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <checkSum1>
	SendChar(checkSum2);
 19a:	17 d2       	rcall	.+1070   	; 0x5ca <SendChar>
 19c:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <checkSum2>
 1a0:	14 d2       	rcall	.+1064   	; 0x5ca <SendChar>
	SendChar(soundEnd);
 1a2:	8f ee       	ldi	r24, 0xEF	; 239
 1a4:	12 c2       	rjmp	.+1060   	; 0x5ca <SendChar>
 1a6:	08 95       	ret

000001a8 <InitSound>:
 1a8:	48 e0       	ldi	r20, 0x08	; 8
unsigned char soundPara2 = 0x00; //Anden parameter af den specifikke kommand kode
unsigned char checkSum1, checkSum2; //Første og andet byte af checksum
const unsigned char soundEnd = 0xEF; //Slut karakter, skal ikke ændres

void InitSound() {
	InitUART(9600, 8); //Uart intialiseres med 9600 baud rate med 8 databit
 1aa:	60 e8       	ldi	r22, 0x80	; 128
 1ac:	75 e2       	ldi	r23, 0x25	; 37
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	b1 d1       	rcall	.+866    	; 0x516 <InitUART>
	
	soundCMD = 0x09;
 1b4:	89 e0       	ldi	r24, 0x09	; 9
 1b6:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <soundCMD>
	soundPara2 = 0x02;
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	sendAudio();
 1c0:	dc cf       	rjmp	.-72     	; 0x17a <sendAudio>
 1c2:	08 95       	ret

000001c4 <playTune>:
	
}

void playTune(unsigned char tune) {
		soundPara2 = tune;
 1c4:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		soundCMD = 0x03;
 1c8:	83 e0       	ldi	r24, 0x03	; 3
 1ca:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <soundCMD>
		sendAudio();			
 1ce:	d5 cf       	rjmp	.-86     	; 0x17a <sendAudio>
 1d0:	08 95       	ret

000001d2 <setVolume>:
}

void setVolume(unsigned char volume) {
	if (volume > 30 || volume < 0) { // Se om parameteren ligger indenfor et lovligt interval
 1d2:	8f 31       	cpi	r24, 0x1F	; 31
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <setVolume+0x6>
		volume = 30;
 1d6:	8e e1       	ldi	r24, 0x1E	; 30
	}
	soundCMD = 0x06;
 1d8:	96 e0       	ldi	r25, 0x06	; 6
 1da:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <soundCMD>
	soundPara2 = volume;
 1de:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	sendAudio();
 1e2:	cb cf       	rjmp	.-106    	; 0x17a <sendAudio>
 1e4:	08 95       	ret

000001e6 <initMotor>:
bool smoothing = false;
unsigned char currentSpeed = 0;
unsigned char newSpeed = 0;

void initMotor(){
	DDRB = 0xFF;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	84 b9       	out	0x04, r24	; 4
	
	sei();
 1ea:	78 94       	sei
	TIMSK3 |= 0b00000000; //no interrupts
 1ec:	e1 e7       	ldi	r30, 0x71	; 113
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 83       	st	Z, r24
	TCCR3A = 0b00000000; //normal mode
 1f4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = 0b00000010; //prescaler
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>
	
	TCCR1A = 0b10100011;
 1fe:	83 ea       	ldi	r24, 0xA3	; 163
 200:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A = 0;
 20a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 20e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;
 212:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 216:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 21a:	08 95       	ret

0000021c <__vector_35>:
}

ISR(TIMER3_OVF_vect){
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	0b b6       	in	r0, 0x3b	; 59
 228:	0f 92       	push	r0
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	//stops timer interrupts
	if (currentSpeed == newSpeed){
 232:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <currentSpeed>
 236:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <newSpeed>
 23a:	98 13       	cpse	r25, r24
 23c:	04 c0       	rjmp	.+8      	; 0x246 <__vector_35+0x2a>
		TIMSK3 |= 0b00000000;
 23e:	e1 e7       	ldi	r30, 0x71	; 113
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 83       	st	Z, r24
	}
	
	if (smoothing) {
 246:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <smoothing>
 24a:	88 23       	and	r24, r24
 24c:	81 f0       	breq	.+32     	; 0x26e <__vector_35+0x52>
		if (newSpeed < currentSpeed)
 24e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <newSpeed>
 252:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 256:	98 17       	cp	r25, r24
 258:	20 f4       	brcc	.+8      	; 0x262 <__vector_35+0x46>
		{
			currentSpeed -= 1;
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
 260:	0a c0       	rjmp	.+20     	; 0x276 <__vector_35+0x5a>
		} 
		else if (newSpeed > currentSpeed)
 262:	89 17       	cp	r24, r25
 264:	40 f4       	brcc	.+16     	; 0x276 <__vector_35+0x5a>
		{
			currentSpeed += 1;
 266:	8f 5f       	subi	r24, 0xFF	; 255
 268:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
 26c:	04 c0       	rjmp	.+8      	; 0x276 <__vector_35+0x5a>
		}
	}else{
		currentSpeed = newSpeed;
 26e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <newSpeed>
 272:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
	}
	
	if (!reverseDirection)
 276:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <reverseDirection>
 27a:	81 11       	cpse	r24, r1
 27c:	10 c0       	rjmp	.+32     	; 0x29e <__vector_35+0x82>
	{
		OCR1B = 0;
 27e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 282:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = currentSpeed * 4;
 286:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 298:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 29c:	0f c0       	rjmp	.+30     	; 0x2bc <__vector_35+0xa0>
	}
	else {
		OCR1A = 0;
 29e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2a2:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = currentSpeed * 4;
 2a6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 2b8:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	}
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	0f 90       	pop	r0
 2c6:	0b be       	out	0x3b, r0	; 59
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <setSpeed>:

void setSpeed(unsigned char speed, bool smooth){
	
	newSpeed = speed;
 2d2:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <newSpeed>
	smoothing = smooth;
 2d6:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <smoothing>
	TIMSK3 |= 0b00000001;
 2da:	e1 e7       	ldi	r30, 0x71	; 113
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	81 60       	ori	r24, 0x01	; 1
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <switchDirection>:
}
	
void switchDirection(){
	reverseDirection = !reverseDirection;
 2e6:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <reverseDirection>
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	89 27       	eor	r24, r25
 2ee:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <reverseDirection>
 2f2:	08 95       	ret

000002f4 <__vector_1>:
#include "motor.h"
#include "lyd.h"

unsigned char triggers = 0;

ISR(INT0_vect){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	0b b6       	in	r0, 0x3b	; 59
 300:	0f 92       	push	r0
 302:	2f 93       	push	r18
 304:	3f 93       	push	r19
 306:	4f 93       	push	r20
 308:	5f 93       	push	r21
 30a:	6f 93       	push	r22
 30c:	7f 93       	push	r23
 30e:	8f 93       	push	r24
 310:	9f 93       	push	r25
 312:	af 93       	push	r26
 314:	bf 93       	push	r27
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	EIMSK |= 0b00000000;
 31a:	8d b3       	in	r24, 0x1d	; 29
 31c:	8d bb       	out	0x1d, r24	; 29
	
	triggers++;
 31e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <triggers>
 322:	e1 e0       	ldi	r30, 0x01	; 1
 324:	e8 0f       	add	r30, r24
 326:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <triggers>
	
	switch(triggers){
 32a:	8e 2f       	mov	r24, r30
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	fc 01       	movw	r30, r24
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	eb 30       	cpi	r30, 0x0B	; 11
 334:	f1 05       	cpc	r31, r1
 336:	08 f0       	brcs	.+2      	; 0x33a <__vector_1+0x46>
 338:	36 c0       	rjmp	.+108    	; 0x3a6 <__vector_1+0xb2>
 33a:	88 27       	eor	r24, r24
 33c:	ee 58       	subi	r30, 0x8E	; 142
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	8f 4f       	sbci	r24, 0xFF	; 255
 342:	6c c1       	rjmp	.+728    	; 0x61c <__tablejump2__>
		case 0:
			break;
		case 1:
			playTune(2);
 344:	82 e0       	ldi	r24, 0x02	; 2
 346:	3e df       	rcall	.-388    	; 0x1c4 <playTune>
			break;
		case 2:
			playTune(2);
 348:	2e c0       	rjmp	.+92     	; 0x3a6 <__vector_1+0xb2>
 34a:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(255,false);
 34c:	3b df       	rcall	.-394    	; 0x1c4 <playTune>
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	8f ef       	ldi	r24, 0xFF	; 255
			break;
 352:	bf df       	rcall	.-130    	; 0x2d2 <setSpeed>
		case 3:
			playTune(2);
 354:	28 c0       	rjmp	.+80     	; 0x3a6 <__vector_1+0xb2>
 356:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(10,false);
 358:	35 df       	rcall	.-406    	; 0x1c4 <playTune>
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	8a e0       	ldi	r24, 0x0A	; 10
			break;
 35e:	b9 df       	rcall	.-142    	; 0x2d2 <setSpeed>
		case 4:
			playTune(2);
 360:	22 c0       	rjmp	.+68     	; 0x3a6 <__vector_1+0xb2>
 362:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(100,false);
 364:	2f df       	rcall	.-418    	; 0x1c4 <playTune>
 366:	60 e0       	ldi	r22, 0x00	; 0
 368:	84 e6       	ldi	r24, 0x64	; 100
			setSpeed(255,true);
 36a:	b3 df       	rcall	.-154    	; 0x2d2 <setSpeed>
 36c:	61 e0       	ldi	r22, 0x01	; 1
			break;
		case 6:
			playTune(2);
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	b0 df       	rcall	.-160    	; 0x2d2 <setSpeed>
			setSpeed(0,false);
 372:	19 c0       	rjmp	.+50     	; 0x3a6 <__vector_1+0xb2>
 374:	82 e0       	ldi	r24, 0x02	; 2
 376:	26 df       	rcall	.-436    	; 0x1c4 <playTune>
			switchDirection();
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	80 e0       	ldi	r24, 0x00	; 0
			setSpeed(200,true);
 37c:	aa df       	rcall	.-172    	; 0x2d2 <setSpeed>
 37e:	b3 df       	rcall	.-154    	; 0x2e6 <switchDirection>
 380:	61 e0       	ldi	r22, 0x01	; 1
			break;
 382:	88 ec       	ldi	r24, 0xC8	; 200
		case 8:
			playTune(2);
 384:	a6 df       	rcall	.-180    	; 0x2d2 <setSpeed>
 386:	0f c0       	rjmp	.+30     	; 0x3a6 <__vector_1+0xb2>
			setSpeed(0,false);
 388:	82 e0       	ldi	r24, 0x02	; 2
 38a:	1c df       	rcall	.-456    	; 0x1c4 <playTune>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	80 e0       	ldi	r24, 0x00	; 0
			switchDirection();
 390:	a0 df       	rcall	.-192    	; 0x2d2 <setSpeed>
 392:	a9 df       	rcall	.-174    	; 0x2e6 <switchDirection>
			setSpeed(180,true);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	84 eb       	ldi	r24, 0xB4	; 180
 398:	9c df       	rcall	.-200    	; 0x2d2 <setSpeed>
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <__vector_1+0xb2>
			break;
 39c:	83 e0       	ldi	r24, 0x03	; 3
		case 11:
			playTune(3);
 39e:	12 df       	rcall	.-476    	; 0x1c4 <playTune>
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
			setSpeed(0,false);
 3a4:	96 df       	rcall	.-212    	; 0x2d2 <setSpeed>
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
 3a8:	89 e6       	ldi	r24, 0x69	; 105
 3aa:	98 e1       	ldi	r25, 0x18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <__vector_1+0xb8>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <__vector_1+0xc2>
 3b6:	00 00       	nop
 3b8:	8f ef       	ldi	r24, 0xFF	; 255
 3ba:	8c bb       	out	0x1c, r24	; 28
 3bc:	8d b3       	in	r24, 0x1d	; 29
			break;
	}
	_delay_ms(500);
	EIFR = 0xFF;
 3be:	83 60       	ori	r24, 0x03	; 3
 3c0:	8d bb       	out	0x1d, r24	; 29
	EIMSK |= 0b00000011;
 3c2:	ff 91       	pop	r31
 3c4:	ef 91       	pop	r30
 3c6:	bf 91       	pop	r27
}
 3c8:	af 91       	pop	r26
 3ca:	9f 91       	pop	r25
 3cc:	8f 91       	pop	r24
 3ce:	7f 91       	pop	r23
 3d0:	6f 91       	pop	r22
 3d2:	5f 91       	pop	r21
 3d4:	4f 91       	pop	r20
 3d6:	3f 91       	pop	r19
 3d8:	2f 91       	pop	r18
 3da:	0f 90       	pop	r0
 3dc:	0b be       	out	0x3b, r0	; 59
 3de:	0f 90       	pop	r0
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	0f 90       	pop	r0
 3e4:	1f 90       	pop	r1
 3e6:	18 95       	reti

000003e8 <__vector_2>:
 3e8:	1f 92       	push	r1
 3ea:	0f 92       	push	r0
 3ec:	0f b6       	in	r0, 0x3f	; 63
ISR(INT1_vect){
 3ee:	0f 92       	push	r0
 3f0:	11 24       	eor	r1, r1
 3f2:	0b b6       	in	r0, 0x3b	; 59
 3f4:	0f 92       	push	r0
 3f6:	2f 93       	push	r18
 3f8:	3f 93       	push	r19
 3fa:	4f 93       	push	r20
 3fc:	5f 93       	push	r21
 3fe:	6f 93       	push	r22
 400:	7f 93       	push	r23
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	ef 93       	push	r30
 40c:	ff 93       	push	r31
	EIMSK |= 0b00000000;
 40e:	8d b3       	in	r24, 0x1d	; 29
 410:	8d bb       	out	0x1d, r24	; 29
	
	triggers++;
 412:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <triggers>
 416:	e1 e0       	ldi	r30, 0x01	; 1
 418:	e8 0f       	add	r30, r24
 41a:	e0 93 07 02 	sts	0x0207, r30	; 0x800207 <triggers>
	switch(triggers){
 41e:	8e 2f       	mov	r24, r30
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	fc 01       	movw	r30, r24
 424:	31 97       	sbiw	r30, 0x01	; 1
 426:	eb 30       	cpi	r30, 0x0B	; 11
 428:	f1 05       	cpc	r31, r1
 42a:	08 f0       	brcs	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	36 c0       	rjmp	.+108    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 42e:	88 27       	eor	r24, r24
 430:	e3 58       	subi	r30, 0x83	; 131
 432:	ff 4f       	sbci	r31, 0xFF	; 255
 434:	8f 4f       	sbci	r24, 0xFF	; 255
 436:	f2 c0       	rjmp	.+484    	; 0x61c <__tablejump2__>
		case 0:
			break;
		case 1:
			playTune(2);
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	c4 de       	rcall	.-632    	; 0x1c4 <playTune>
			break;
		case 2:
			playTune(2);
 43c:	2e c0       	rjmp	.+92     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 43e:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(255,false);
 440:	c1 de       	rcall	.-638    	; 0x1c4 <playTune>
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	8f ef       	ldi	r24, 0xFF	; 255
			break;
 446:	45 df       	rcall	.-374    	; 0x2d2 <setSpeed>
		case 3:
			playTune(2);
 448:	28 c0       	rjmp	.+80     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 44a:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(10,false);
 44c:	bb de       	rcall	.-650    	; 0x1c4 <playTune>
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8a e0       	ldi	r24, 0x0A	; 10
			break;
 452:	3f df       	rcall	.-386    	; 0x2d2 <setSpeed>
		case 4:
			playTune(2);
 454:	22 c0       	rjmp	.+68     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 456:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(100,false);
 458:	b5 de       	rcall	.-662    	; 0x1c4 <playTune>
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	84 e6       	ldi	r24, 0x64	; 100
			setSpeed(255,true);
 45e:	39 df       	rcall	.-398    	; 0x2d2 <setSpeed>
 460:	61 e0       	ldi	r22, 0x01	; 1
			break;
		case 6:
			playTune(2);
 462:	8f ef       	ldi	r24, 0xFF	; 255
 464:	36 df       	rcall	.-404    	; 0x2d2 <setSpeed>
			setSpeed(0,false);
 466:	19 c0       	rjmp	.+50     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 468:	82 e0       	ldi	r24, 0x02	; 2
 46a:	ac de       	rcall	.-680    	; 0x1c4 <playTune>
			switchDirection();
 46c:	60 e0       	ldi	r22, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
			setSpeed(200,true);
 470:	30 df       	rcall	.-416    	; 0x2d2 <setSpeed>
 472:	39 df       	rcall	.-398    	; 0x2e6 <switchDirection>
 474:	61 e0       	ldi	r22, 0x01	; 1
			break;
 476:	88 ec       	ldi	r24, 0xC8	; 200
		case 8:
			playTune(2);
 478:	2c df       	rcall	.-424    	; 0x2d2 <setSpeed>
 47a:	0f c0       	rjmp	.+30     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			setSpeed(0,false);
 47c:	82 e0       	ldi	r24, 0x02	; 2
 47e:	a2 de       	rcall	.-700    	; 0x1c4 <playTune>
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	80 e0       	ldi	r24, 0x00	; 0
			switchDirection();
 484:	26 df       	rcall	.-436    	; 0x2d2 <setSpeed>
 486:	2f df       	rcall	.-418    	; 0x2e6 <switchDirection>
			setSpeed(180,true);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	84 eb       	ldi	r24, 0xB4	; 180
 48c:	22 df       	rcall	.-444    	; 0x2d2 <setSpeed>
 48e:	05 c0       	rjmp	.+10     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
			break;
 490:	83 e0       	ldi	r24, 0x03	; 3
		case 11:
			playTune(3);
 492:	98 de       	rcall	.-720    	; 0x1c4 <playTune>
 494:	60 e0       	ldi	r22, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
			setSpeed(0,false);
 498:	1c df       	rcall	.-456    	; 0x2d2 <setSpeed>
 49a:	2f ef       	ldi	r18, 0xFF	; 255
 49c:	89 e6       	ldi	r24, 0x69	; 105
 49e:	98 e1       	ldi	r25, 0x18	; 24
 4a0:	21 50       	subi	r18, 0x01	; 1
 4a2:	80 40       	sbci	r24, 0x00	; 0
 4a4:	90 40       	sbci	r25, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4aa:	00 00       	nop
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	8c bb       	out	0x1c, r24	; 28
 4b0:	8d b3       	in	r24, 0x1d	; 29
			break;

	}
	_delay_ms(500);
	
	EIFR = 0xFF;
 4b2:	83 60       	ori	r24, 0x03	; 3
 4b4:	8d bb       	out	0x1d, r24	; 29
	EIMSK |= 0b00000011;
 4b6:	ff 91       	pop	r31
 4b8:	ef 91       	pop	r30
 4ba:	bf 91       	pop	r27
}
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	3f 91       	pop	r19
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0b be       	out	0x3b, r0	; 59
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <main>:
 4dc:	78 94       	sei
 4de:	83 de       	rcall	.-762    	; 0x1e6 <initMotor>
 4e0:	63 de       	rcall	.-826    	; 0x1a8 <InitSound>

int main(void)
{
	sei();
	initMotor();
	InitSound();
 4e2:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF;
 4e4:	84 b9       	out	0x04, r24	; 4
 4e6:	11 b8       	out	0x01, r1	; 1
	DDRA = 0;
 4e8:	8f e0       	ldi	r24, 0x0F	; 15

	EICRA = 0b00001111;
 4ea:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>
	
	setVolume(30);
 4ee:	8e e1       	ldi	r24, 0x1E	; 30
 4f0:	70 de       	rcall	.-800    	; 0x1d2 <setVolume>
 4f2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <triggers>
	
	//testMotor();
    triggers = 0;
 4f6:	00 99       	sbic	0x00, 0	; 0
	
	/* Replace with your application code */
    while (1) 
    {	
			if (~PINA & (1 << 0))
 4f8:	08 c0       	rjmp	.+16     	; 0x50a <main+0x2e>
			{
				playTune(1);
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	63 de       	rcall	.-826    	; 0x1c4 <playTune>
				setSpeed(50,false);
 4fe:	60 e0       	ldi	r22, 0x00	; 0
 500:	82 e3       	ldi	r24, 0x32	; 50
 502:	e7 de       	rcall	.-562    	; 0x2d2 <setSpeed>
				setSpeed(255,true);
 504:	61 e0       	ldi	r22, 0x01	; 1
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	e4 de       	rcall	.-568    	; 0x2d2 <setSpeed>
 50a:	8f ef       	ldi	r24, 0xFF	; 255
			}
		EIFR = 0xFF;
 50c:	8c bb       	out	0x1c, r24	; 28
 50e:	8d b3       	in	r24, 0x1d	; 29
		EIMSK |= 0b00000011;
 510:	83 60       	ori	r24, 0x03	; 3
 512:	8d bb       	out	0x1d, r24	; 29
 514:	f0 cf       	rjmp	.-32     	; 0x4f6 <main+0x1a>

00000516 <InitUART>:
		//testMotor();
		
	}
 516:	cf 92       	push	r12
  // Wait for new character received
  while ( (UCSR2A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR2;
}
 518:	df 92       	push	r13
 51a:	ef 92       	push	r14
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	8b 01       	movw	r16, r22
 524:	9c 01       	movw	r18, r24
 526:	0c 52       	subi	r16, 0x2C	; 44
 528:	11 40       	sbci	r17, 0x01	; 1
 52a:	21 09       	sbc	r18, r1
 52c:	31 09       	sbc	r19, r1
 52e:	05 3d       	cpi	r16, 0xD5	; 213
 530:	10 4c       	sbci	r17, 0xC0	; 192
 532:	21 40       	sbci	r18, 0x01	; 1
 534:	31 05       	cpc	r19, r1
 536:	08 f0       	brcs	.+2      	; 0x53a <InitUART+0x24>
 538:	41 c0       	rjmp	.+130    	; 0x5bc <InitUART+0xa6>
 53a:	45 30       	cpi	r20, 0x05	; 5
 53c:	08 f4       	brcc	.+2      	; 0x540 <InitUART+0x2a>
 53e:	3e c0       	rjmp	.+124    	; 0x5bc <InitUART+0xa6>
 540:	49 30       	cpi	r20, 0x09	; 9
 542:	e0 f5       	brcc	.+120    	; 0x5bc <InitUART+0xa6>
 544:	20 e2       	ldi	r18, 0x20	; 32
 546:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 54a:	28 e1       	ldi	r18, 0x18	; 24
 54c:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 550:	45 50       	subi	r20, 0x05	; 5
 552:	44 0f       	add	r20, r20
 554:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 558:	6b 01       	movw	r12, r22
 55a:	7c 01       	movw	r14, r24
 55c:	20 e8       	ldi	r18, 0x80	; 128
 55e:	c2 0e       	add	r12, r18
 560:	24 e8       	ldi	r18, 0x84	; 132
 562:	d2 1e       	adc	r13, r18
 564:	2e e1       	ldi	r18, 0x1E	; 30
 566:	e2 1e       	adc	r14, r18
 568:	f1 1c       	adc	r15, r1
 56a:	cc 0c       	add	r12, r12
 56c:	dd 1c       	adc	r13, r13
 56e:	ee 1c       	adc	r14, r14
 570:	ff 1c       	adc	r15, r15
 572:	cc 0c       	add	r12, r12
 574:	dd 1c       	adc	r13, r13
 576:	ee 1c       	adc	r14, r14
 578:	ff 1c       	adc	r15, r15
 57a:	cc 0c       	add	r12, r12
 57c:	dd 1c       	adc	r13, r13
 57e:	ee 1c       	adc	r14, r14
 580:	ff 1c       	adc	r15, r15
 582:	dc 01       	movw	r26, r24
 584:	cb 01       	movw	r24, r22
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	aa 1f       	adc	r26, r26
 58c:	bb 1f       	adc	r27, r27
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	aa 1f       	adc	r26, r26
 594:	bb 1f       	adc	r27, r27
 596:	9c 01       	movw	r18, r24
 598:	ad 01       	movw	r20, r26
 59a:	22 0f       	add	r18, r18
 59c:	33 1f       	adc	r19, r19
 59e:	44 1f       	adc	r20, r20
 5a0:	55 1f       	adc	r21, r21
 5a2:	22 0f       	add	r18, r18
 5a4:	33 1f       	adc	r19, r19
 5a6:	44 1f       	adc	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	c7 01       	movw	r24, r14
 5ac:	b6 01       	movw	r22, r12
 5ae:	14 d0       	rcall	.+40     	; 0x5d8 <__udivmodsi4>
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	31 09       	sbc	r19, r1
 5b4:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 5b8:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
 5bc:	1f 91       	pop	r17
 5be:	0f 91       	pop	r16
 5c0:	ff 90       	pop	r15
 5c2:	ef 90       	pop	r14
 5c4:	df 90       	pop	r13
 5c6:	cf 90       	pop	r12
 5c8:	08 95       	ret

000005ca <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR2A & (1<<5)) == 0 )
 5ca:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 5ce:	95 ff       	sbrs	r25, 5
 5d0:	fc cf       	rjmp	.-8      	; 0x5ca <SendChar>
  {}
  // Then send the character
  UDR2 = Tegn;
 5d2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 5d6:	08 95       	ret

000005d8 <__udivmodsi4>:
 5d8:	a1 e2       	ldi	r26, 0x21	; 33
 5da:	1a 2e       	mov	r1, r26
 5dc:	aa 1b       	sub	r26, r26
 5de:	bb 1b       	sub	r27, r27
 5e0:	fd 01       	movw	r30, r26
 5e2:	0d c0       	rjmp	.+26     	; 0x5fe <__udivmodsi4_ep>

000005e4 <__udivmodsi4_loop>:
 5e4:	aa 1f       	adc	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	ee 1f       	adc	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	a2 17       	cp	r26, r18
 5ee:	b3 07       	cpc	r27, r19
 5f0:	e4 07       	cpc	r30, r20
 5f2:	f5 07       	cpc	r31, r21
 5f4:	20 f0       	brcs	.+8      	; 0x5fe <__udivmodsi4_ep>
 5f6:	a2 1b       	sub	r26, r18
 5f8:	b3 0b       	sbc	r27, r19
 5fa:	e4 0b       	sbc	r30, r20
 5fc:	f5 0b       	sbc	r31, r21

000005fe <__udivmodsi4_ep>:
 5fe:	66 1f       	adc	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	88 1f       	adc	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	1a 94       	dec	r1
 608:	69 f7       	brne	.-38     	; 0x5e4 <__udivmodsi4_loop>
 60a:	60 95       	com	r22
 60c:	70 95       	com	r23
 60e:	80 95       	com	r24
 610:	90 95       	com	r25
 612:	9b 01       	movw	r18, r22
 614:	ac 01       	movw	r20, r24
 616:	bd 01       	movw	r22, r26
 618:	cf 01       	movw	r24, r30
 61a:	08 95       	ret

0000061c <__tablejump2__>:
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	88 1f       	adc	r24, r24
 622:	8b bf       	out	0x3b, r24	; 59
 624:	07 90       	elpm	r0, Z+
 626:	f6 91       	elpm	r31, Z
 628:	e0 2d       	mov	r30, r0
 62a:	19 94       	eijmp

0000062c <_exit>:
 62c:	f8 94       	cli

0000062e <__stop_program>:
 62e:	ff cf       	rjmp	.-2      	; 0x62e <__stop_program>
