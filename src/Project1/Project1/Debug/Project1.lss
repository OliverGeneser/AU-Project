
Project1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000710  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800200  00800200  00000784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae0  00000000  00000000  0000092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001010  00000000  00000000  0000240c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba3  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ba  00000000  00000000  00004290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000545  00000000  00000000  00004a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004f8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
   2:	00 00       	nop
   4:	b0 c1       	rjmp	.+864    	; 0x366 <__vector_1>
   6:	00 00       	nop
   8:	3f c2       	rjmp	.+1150   	; 0x488 <__vector_2>
   a:	00 00       	nop
   c:	a2 c0       	rjmp	.+324    	; 0x152 <__bad_interrupt>
   e:	00 00       	nop
  10:	a0 c0       	rjmp	.+320    	; 0x152 <__bad_interrupt>
  12:	00 00       	nop
  14:	9e c0       	rjmp	.+316    	; 0x152 <__bad_interrupt>
  16:	00 00       	nop
  18:	9c c0       	rjmp	.+312    	; 0x152 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9a c0       	rjmp	.+308    	; 0x152 <__bad_interrupt>
  1e:	00 00       	nop
  20:	98 c0       	rjmp	.+304    	; 0x152 <__bad_interrupt>
  22:	00 00       	nop
  24:	96 c0       	rjmp	.+300    	; 0x152 <__bad_interrupt>
  26:	00 00       	nop
  28:	94 c0       	rjmp	.+296    	; 0x152 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	92 c0       	rjmp	.+292    	; 0x152 <__bad_interrupt>
  2e:	00 00       	nop
  30:	90 c0       	rjmp	.+288    	; 0x152 <__bad_interrupt>
  32:	00 00       	nop
  34:	8e c0       	rjmp	.+284    	; 0x152 <__bad_interrupt>
  36:	00 00       	nop
  38:	8c c0       	rjmp	.+280    	; 0x152 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8a c0       	rjmp	.+276    	; 0x152 <__bad_interrupt>
  3e:	00 00       	nop
  40:	88 c0       	rjmp	.+272    	; 0x152 <__bad_interrupt>
  42:	00 00       	nop
  44:	86 c0       	rjmp	.+268    	; 0x152 <__bad_interrupt>
  46:	00 00       	nop
  48:	84 c0       	rjmp	.+264    	; 0x152 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	82 c0       	rjmp	.+260    	; 0x152 <__bad_interrupt>
  4e:	00 00       	nop
  50:	80 c0       	rjmp	.+256    	; 0x152 <__bad_interrupt>
  52:	00 00       	nop
  54:	7e c0       	rjmp	.+252    	; 0x152 <__bad_interrupt>
  56:	00 00       	nop
  58:	7c c0       	rjmp	.+248    	; 0x152 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	7a c0       	rjmp	.+244    	; 0x152 <__bad_interrupt>
  5e:	00 00       	nop
  60:	78 c0       	rjmp	.+240    	; 0x152 <__bad_interrupt>
  62:	00 00       	nop
  64:	76 c0       	rjmp	.+236    	; 0x152 <__bad_interrupt>
  66:	00 00       	nop
  68:	74 c0       	rjmp	.+232    	; 0x152 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	72 c0       	rjmp	.+228    	; 0x152 <__bad_interrupt>
  6e:	00 00       	nop
  70:	70 c0       	rjmp	.+224    	; 0x152 <__bad_interrupt>
  72:	00 00       	nop
  74:	6e c0       	rjmp	.+220    	; 0x152 <__bad_interrupt>
  76:	00 00       	nop
  78:	6c c0       	rjmp	.+216    	; 0x152 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	6a c0       	rjmp	.+212    	; 0x152 <__bad_interrupt>
  7e:	00 00       	nop
  80:	68 c0       	rjmp	.+208    	; 0x152 <__bad_interrupt>
  82:	00 00       	nop
  84:	66 c0       	rjmp	.+204    	; 0x152 <__bad_interrupt>
  86:	00 00       	nop
  88:	64 c0       	rjmp	.+200    	; 0x152 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	00 c1       	rjmp	.+512    	; 0x28e <__vector_35>
  8e:	00 00       	nop
  90:	60 c0       	rjmp	.+192    	; 0x152 <__bad_interrupt>
  92:	00 00       	nop
  94:	5e c0       	rjmp	.+188    	; 0x152 <__bad_interrupt>
  96:	00 00       	nop
  98:	5c c0       	rjmp	.+184    	; 0x152 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	5a c0       	rjmp	.+180    	; 0x152 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	58 c0       	rjmp	.+176    	; 0x152 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	56 c0       	rjmp	.+172    	; 0x152 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	54 c0       	rjmp	.+168    	; 0x152 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	52 c0       	rjmp	.+164    	; 0x152 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	50 c0       	rjmp	.+160    	; 0x152 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	4e c0       	rjmp	.+156    	; 0x152 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	4c c0       	rjmp	.+152    	; 0x152 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	4a c0       	rjmp	.+148    	; 0x152 <__bad_interrupt>
  be:	00 00       	nop
  c0:	48 c0       	rjmp	.+144    	; 0x152 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	46 c0       	rjmp	.+140    	; 0x152 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	44 c0       	rjmp	.+136    	; 0x152 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	42 c0       	rjmp	.+132    	; 0x152 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	40 c0       	rjmp	.+128    	; 0x152 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	3e c0       	rjmp	.+124    	; 0x152 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	3c c0       	rjmp	.+120    	; 0x152 <__bad_interrupt>
  da:	00 00       	nop
  dc:	3a c0       	rjmp	.+116    	; 0x152 <__bad_interrupt>
  de:	00 00       	nop
  e0:	38 c0       	rjmp	.+112    	; 0x152 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	d6 01       	movw	r26, r12
  e6:	d9 01       	movw	r26, r18
  e8:	dc 01       	movw	r26, r24
  ea:	e2 01       	movw	r28, r4
  ec:	e8 01       	movw	r28, r16
  ee:	f1 01       	movw	r30, r2
  f0:	f4 01       	movw	r30, r8
  f2:	04 02       	muls	r16, r20
  f4:	07 02       	muls	r16, r23
  f6:	17 02       	muls	r17, r23
  f8:	1a 02       	muls	r17, r26
  fa:	1d 02       	muls	r17, r29
  fc:	67 02       	muls	r22, r23
  fe:	6a 02       	muls	r22, r26
 100:	6d 02       	muls	r22, r29
 102:	73 02       	muls	r23, r19
 104:	79 02       	muls	r23, r25
 106:	82 02       	muls	r24, r18
 108:	85 02       	muls	r24, r21
 10a:	95 02       	muls	r25, r21
 10c:	98 02       	muls	r25, r24
 10e:	a8 02       	muls	r26, r24
 110:	ab 02       	muls	r26, r27
 112:	ae 02       	muls	r26, r30

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d1 e2       	ldi	r29, 0x21	; 33
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	0c bf       	out	0x3c, r16	; 60

00000124 <__do_copy_data>:
 124:	12 e0       	ldi	r17, 0x02	; 2
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b2 e0       	ldi	r27, 0x02	; 2
 12a:	e0 e1       	ldi	r30, 0x10	; 16
 12c:	f7 e0       	ldi	r31, 0x07	; 7
 12e:	00 e0       	ldi	r16, 0x00	; 0
 130:	0b bf       	out	0x3b, r16	; 59
 132:	02 c0       	rjmp	.+4      	; 0x138 <__do_copy_data+0x14>
 134:	07 90       	elpm	r0, Z+
 136:	0d 92       	st	X+, r0
 138:	a0 30       	cpi	r26, 0x00	; 0
 13a:	b1 07       	cpc	r27, r17
 13c:	d9 f7       	brne	.-10     	; 0x134 <__do_copy_data+0x10>

0000013e <__do_clear_bss>:
 13e:	22 e0       	ldi	r18, 0x02	; 2
 140:	a0 e0       	ldi	r26, 0x00	; 0
 142:	b2 e0       	ldi	r27, 0x02	; 2
 144:	01 c0       	rjmp	.+2      	; 0x148 <.do_clear_bss_start>

00000146 <.do_clear_bss_loop>:
 146:	1d 92       	st	X+, r1

00000148 <.do_clear_bss_start>:
 148:	aa 30       	cpi	r26, 0x0A	; 10
 14a:	b2 07       	cpc	r27, r18
 14c:	e1 f7       	brne	.-8      	; 0x146 <.do_clear_bss_loop>
 14e:	2d d2       	rcall	.+1114   	; 0x5aa <main>
 150:	dd c2       	rjmp	.+1466   	; 0x70c <_exit>

00000152 <__bad_interrupt>:
 152:	56 cf       	rjmp	.-340    	; 0x0 <__vectors>

00000154 <lightInitiate>:
#define MAX 65535


void lightInitiate()
{
	DDRH = 0xFF; //PH3 og PH4 sættes som output
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	TCCR4B |= 1; //Ingen prescale
 15a:	e1 ea       	ldi	r30, 0xA1	; 161
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	81 60       	ori	r24, 0x01	; 1
 162:	80 83       	st	Z, r24
	TCCR4A |= 0b11; //PWM MODE 3
 164:	e0 ea       	ldi	r30, 0xA0	; 160
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	83 60       	ori	r24, 0x03	; 3
 16c:	80 83       	st	Z, r24
	TCCR4A |= 0b10100000; 
 16e:	80 81       	ld	r24, Z
 170:	80 6a       	ori	r24, 0xA0	; 160
 172:	80 83       	st	Z, r24
	TCCR4A &= 0b10101111; //Slukket imens timeren kører op og slukket imens den kører ned
 174:	80 81       	ld	r24, Z
 176:	8f 7a       	andi	r24, 0xAF	; 175
 178:	80 83       	st	Z, r24

	OCR4A = 0; //Slukket
 17a:	e8 ea       	ldi	r30, 0xA8	; 168
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	11 82       	std	Z+1, r1	; 0x01
 180:	10 82       	st	Z, r1
	OCR4A = 0; //Slukket
 182:	11 82       	std	Z+1, r1	; 0x01
 184:	10 82       	st	Z, r1
 186:	08 95       	ret

00000188 <turnOnLight>:
}

void turnOnLight() {
	OCR4A = 500; //Timer til forlys (pin 5)
 188:	84 ef       	ldi	r24, 0xF4	; 244
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 190:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4B = 50000; //Timer til baglys (pin 2)
 194:	80 e5       	ldi	r24, 0x50	; 80
 196:	93 ec       	ldi	r25, 0xC3	; 195
 198:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
 19c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
 1a0:	08 95       	ret

000001a2 <turnOffLight>:
}

void turnOffLight() {
	OCR4A = 0; //Sluk
 1a2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 1a6:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	OCR4B = 0; //Sluk
 1aa:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
 1ae:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
 1b2:	08 95       	ret

000001b4 <changeToBreakingLight>:
}
void changeToBreakingLight(int intensity) {
	//Tjek om intensiteten ligger i et lovligt interval
	if(intensity >= 0 && intensity <= MAX) { 
 1b4:	99 23       	and	r25, r25
 1b6:	24 f0       	brlt	.+8      	; 0x1c0 <changeToBreakingLight+0xc>
		OCR4B = intensity; //Sæt lysstyrken på baglyset til den givne parameter
 1b8:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
 1bc:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
 1c0:	08 95       	ret

000001c2 <checkSum>:
	
	sendAudio();
}

void checkSum(){
	unsigned int sum = 0xFFFF-(soundCMD+soundFeedback+soundPara1+soundPara2)+1; //Checksum 16 bit gemmes i en variabel vha. formlen fra databladet
 1c2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <soundCMD>
 1c6:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <soundPara1>
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	82 0f       	add	r24, r18
 1ce:	91 1d       	adc	r25, r1
 1d0:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1d4:	82 0f       	add	r24, r18
 1d6:	91 1d       	adc	r25, r1
 1d8:	91 95       	neg	r25
 1da:	81 95       	neg	r24
 1dc:	91 09       	sbc	r25, r1
	
	checkSum2 = sum % 256; //Find de 8 mindst betydede cifre
 1de:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <checkSum2>
	checkSum1 = (sum - checkSum2) / 256; //Find de 8 mest betydende cifre
 1e2:	88 1b       	sub	r24, r24
 1e4:	91 09       	sbc	r25, r1
 1e6:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <checkSum1>
 1ea:	08 95       	ret

000001ec <sendAudio>:
	sendAudio();
}

void sendAudio() {
	// Sends a 1 byte code to the SOMO 8 times
	checkSum(); //Checksum kaldes for at finde de rigtige værdier til checksum1 og checksum2
 1ec:	ea df       	rcall	.-44     	; 0x1c2 <checkSum>
	SendChar(soundStart);
 1ee:	8e e7       	ldi	r24, 0x7E	; 126
 1f0:	5c d2       	rcall	.+1208   	; 0x6aa <SendChar>
	SendChar(soundCMD);
 1f2:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <soundCMD>
	SendChar(soundFeedback);
 1f6:	59 d2       	rcall	.+1202   	; 0x6aa <SendChar>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
	SendChar(soundPara1);
 1fa:	57 d2       	rcall	.+1198   	; 0x6aa <SendChar>
 1fc:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <soundPara1>
	SendChar(soundPara2);
 200:	54 d2       	rcall	.+1192   	; 0x6aa <SendChar>
 202:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
	SendChar(checkSum1);
 206:	51 d2       	rcall	.+1186   	; 0x6aa <SendChar>
 208:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <checkSum1>
	SendChar(checkSum2);
 20c:	4e d2       	rcall	.+1180   	; 0x6aa <SendChar>
 20e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <checkSum2>
 212:	4b d2       	rcall	.+1174   	; 0x6aa <SendChar>
	SendChar(soundEnd);
 214:	8f ee       	ldi	r24, 0xEF	; 239
 216:	49 c2       	rjmp	.+1170   	; 0x6aa <SendChar>
 218:	08 95       	ret

0000021a <InitSound>:
 21a:	48 e0       	ldi	r20, 0x08	; 8
unsigned char soundPara2 = 0x00; //Anden parameter af den specifikke kommand kode
unsigned char checkSum1, checkSum2; //Første og andet byte af checksum
const unsigned char soundEnd = 0xEF; //Slut karakter, skal ikke ændres

void InitSound() {
	InitUART(9600, 8); //Uart intialiseres med 9600 baud rate med 8 databit
 21c:	60 e8       	ldi	r22, 0x80	; 128
 21e:	75 e2       	ldi	r23, 0x25	; 37
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	e8 d1       	rcall	.+976    	; 0x5f6 <InitUART>
	
	soundCMD = 0x09;
 226:	89 e0       	ldi	r24, 0x09	; 9
 228:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <soundCMD>
	soundPara2 = 0x02;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	sendAudio();
 232:	dc cf       	rjmp	.-72     	; 0x1ec <sendAudio>
 234:	08 95       	ret

00000236 <playTune>:
	
}

void playTune(unsigned char tune) {
		soundPara2 = tune;
 236:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
		soundCMD = 0x03;
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <soundCMD>
		sendAudio();			
 240:	d5 cf       	rjmp	.-86     	; 0x1ec <sendAudio>
 242:	08 95       	ret

00000244 <setVolume>:
}

void setVolume(unsigned char volume) {
	if (volume > 30 || volume < 0) { // Se om parameteren ligger indenfor et lovligt interval
 244:	8f 31       	cpi	r24, 0x1F	; 31
 246:	08 f0       	brcs	.+2      	; 0x24a <setVolume+0x6>
		volume = 30;
 248:	8e e1       	ldi	r24, 0x1E	; 30
	}
	soundCMD = 0x06;
 24a:	96 e0       	ldi	r25, 0x06	; 6
 24c:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <soundCMD>
	soundPara2 = volume;
 250:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	
	sendAudio();
 254:	cb cf       	rjmp	.-106    	; 0x1ec <sendAudio>
 256:	08 95       	ret

00000258 <initMotor>:
unsigned char newSpeed = 0;

// functions for initialization of the interrupts and I/O port B
void initMotor()
{
	DDRB = 0xFF;
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	84 b9       	out	0x04, r24	; 4
	
	sei();
 25c:	78 94       	sei
	TIMSK3 |= 0b00000000; // no interrupts
 25e:	e1 e7       	ldi	r30, 0x71	; 113
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 83       	st	Z, r24
	TCCR3A = 0b00000000;  // normal mode
 266:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
	TCCR3B = 0b00000010;  // prescaler
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7c0091>

	TCCR1A = 0b10100011;
 270:	83 ea       	ldi	r24, 0xA3	; 163
 272:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
	TCCR1B = 0b00000001;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A = 0;
 27c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 280:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	OCR1B = 0;
 284:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 288:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
 28c:	08 95       	ret

0000028e <__vector_35>:
}


ISR(TIMER3_OVF_vect)
{
 28e:	1f 92       	push	r1
 290:	0f 92       	push	r0
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	0f 92       	push	r0
 296:	11 24       	eor	r1, r1
 298:	0b b6       	in	r0, 0x3b	; 59
 29a:	0f 92       	push	r0
 29c:	8f 93       	push	r24
 29e:	9f 93       	push	r25
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
	// check for smoothing flag or directly sets the speed
	if (smoothing)
 2a4:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <smoothing>
 2a8:	88 23       	and	r24, r24
 2aa:	81 f0       	breq	.+32     	; 0x2cc <__vector_35+0x3e>
	{
		if (newSpeed < currentSpeed)
 2ac:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <newSpeed>
 2b0:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 2b4:	98 17       	cp	r25, r24
 2b6:	20 f4       	brcc	.+8      	; 0x2c0 <__vector_35+0x32>
		{
			currentSpeed -= 1;
 2b8:	81 50       	subi	r24, 0x01	; 1
 2ba:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
 2be:	0a c0       	rjmp	.+20     	; 0x2d4 <__vector_35+0x46>
		}
		else if (newSpeed > currentSpeed)
 2c0:	89 17       	cp	r24, r25
 2c2:	40 f4       	brcc	.+16     	; 0x2d4 <__vector_35+0x46>
		{
			currentSpeed += 1;
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
 2ca:	04 c0       	rjmp	.+8      	; 0x2d4 <__vector_35+0x46>
		}
	}
	else
	{
		currentSpeed = newSpeed;
 2cc:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <newSpeed>
 2d0:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <currentSpeed>
	}

	// sets the output based on the current direction
	if (!reverseDirection)
 2d4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <reverseDirection>
 2d8:	81 11       	cpse	r24, r1
 2da:	10 c0       	rjmp	.+32     	; 0x2fc <__vector_35+0x6e>
	{
		OCR1B = 0;
 2dc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 2e0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
		OCR1A = currentSpeed * 4;
 2e4:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 2f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 2fa:	0f c0       	rjmp	.+30     	; 0x31a <__vector_35+0x8c>
	}
	else
	{
		OCR1A = 0;
 2fc:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 300:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
		OCR1B = currentSpeed * 4;
 304:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <currentSpeed>
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
 316:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
	}
	
	// stops timer interrupts
	if (currentSpeed == newSpeed)
 31a:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <currentSpeed>
 31e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <newSpeed>
 322:	98 13       	cpse	r25, r24
 324:	04 c0       	rjmp	.+8      	; 0x32e <__vector_35+0xa0>
	{
		TIMSK3 |= 0b00000000;
 326:	e1 e7       	ldi	r30, 0x71	; 113
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 83       	st	Z, r24
	}
}
 32e:	ff 91       	pop	r31
 330:	ef 91       	pop	r30
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0b be       	out	0x3b, r0	; 59
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <setSpeed>:

// function sets the new speed, sets the smoothing flag and starts the interrupt
void setSpeed(unsigned char speed, bool smooth)
{
	newSpeed = speed;
 344:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <newSpeed>
	smoothing = smooth;
 348:	60 93 05 02 	sts	0x0205, r22	; 0x800205 <smoothing>
	TIMSK3 |= 0b00000001;
 34c:	e1 e7       	ldi	r30, 0x71	; 113
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	81 60       	ori	r24, 0x01	; 1
 354:	80 83       	st	Z, r24
 356:	08 95       	ret

00000358 <switchDirection>:
}

// function for switching the direction
void switchDirection()
{
	reverseDirection = !reverseDirection;
 358:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <reverseDirection>
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	89 27       	eor	r24, r25
 360:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <reverseDirection>
 364:	08 95       	ret

00000366 <__vector_1>:

unsigned char triggers = 0;

// ISR on INT0
ISR(INT0_vect)
{
 366:	1f 92       	push	r1
 368:	0f 92       	push	r0
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	0f 92       	push	r0
 36e:	11 24       	eor	r1, r1
 370:	0b b6       	in	r0, 0x3b	; 59
 372:	0f 92       	push	r0
 374:	2f 93       	push	r18
 376:	3f 93       	push	r19
 378:	4f 93       	push	r20
 37a:	5f 93       	push	r21
 37c:	6f 93       	push	r22
 37e:	7f 93       	push	r23
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	af 93       	push	r26
 386:	bf 93       	push	r27
 388:	ef 93       	push	r30
 38a:	ff 93       	push	r31
	// increments the current map number
	triggers++;
 38c:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <triggers>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <triggers>

	// switch for controlling the car in relation to the current reflex
	switch (triggers)
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	8c 30       	cpi	r24, 0x0C	; 12
 39a:	91 05       	cpc	r25, r1
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <__vector_1+0x3a>
 39e:	53 c0       	rjmp	.+166    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3a0:	fc 01       	movw	r30, r24
 3a2:	88 27       	eor	r24, r24
 3a4:	ee 58       	subi	r30, 0x8E	; 142
 3a6:	ff 4f       	sbci	r31, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	a8 c1       	rjmp	.+848    	; 0x6fc <__tablejump2__>
	{
	case 0:
playTune(2);
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	43 df       	rcall	.-378    	; 0x236 <playTune>
		break;
	case 1:
		playTune(2);
 3b0:	4a c0       	rjmp	.+148    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
		break;
 3b4:	40 df       	rcall	.-384    	; 0x236 <playTune>
	case 2:
		playTune(2);
 3b6:	47 c0       	rjmp	.+142    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3b8:	82 e0       	ldi	r24, 0x02	; 2
		setSpeed(255, false);
 3ba:	3d df       	rcall	.-390    	; 0x236 <playTune>
 3bc:	60 e0       	ldi	r22, 0x00	; 0
 3be:	8f ef       	ldi	r24, 0xFF	; 255
		break;
	case 3:
		playTune(2);
 3c0:	c1 df       	rcall	.-126    	; 0x344 <setSpeed>
 3c2:	41 c0       	rjmp	.+130    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		setSpeed(10, false);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	37 df       	rcall	.-402    	; 0x236 <playTune>
 3c8:	60 e0       	ldi	r22, 0x00	; 0
		break;
 3ca:	8a e0       	ldi	r24, 0x0A	; 10
	case 4:
		playTune(2);
 3cc:	bb df       	rcall	.-138    	; 0x344 <setSpeed>
 3ce:	3b c0       	rjmp	.+118    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		setSpeed(100, false);
 3d0:	82 e0       	ldi	r24, 0x02	; 2
 3d2:	31 df       	rcall	.-414    	; 0x236 <playTune>
 3d4:	60 e0       	ldi	r22, 0x00	; 0
		setSpeed(255, true);
 3d6:	84 e6       	ldi	r24, 0x64	; 100
 3d8:	b5 df       	rcall	.-150    	; 0x344 <setSpeed>
 3da:	61 e0       	ldi	r22, 0x01	; 1
		break;
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
	case 5:
		playTune(2);
 3de:	b2 df       	rcall	.-156    	; 0x344 <setSpeed>
 3e0:	32 c0       	rjmp	.+100    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		break;
 3e2:	82 e0       	ldi	r24, 0x02	; 2
	case 6:
		playTune(2);
 3e4:	28 df       	rcall	.-432    	; 0x236 <playTune>
 3e6:	2f c0       	rjmp	.+94     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		switchDirection();
 3e8:	82 e0       	ldi	r24, 0x02	; 2
		changeToBreakingLight(65535);
 3ea:	25 df       	rcall	.-438    	; 0x236 <playTune>
 3ec:	b5 df       	rcall	.-150    	; 0x358 <switchDirection>
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
		setSpeed(30, false);
 3f0:	9f ef       	ldi	r25, 0xFF	; 255
 3f2:	e0 de       	rcall	.-576    	; 0x1b4 <changeToBreakingLight>
		
		setSpeed(200, true);
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	8e e1       	ldi	r24, 0x1E	; 30
 3f8:	a5 df       	rcall	.-182    	; 0x344 <setSpeed>
		changeToBreakingLight(10000);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	88 ec       	ldi	r24, 0xC8	; 200
 3fe:	a2 df       	rcall	.-188    	; 0x344 <setSpeed>
		
		break;
 400:	80 e1       	ldi	r24, 0x10	; 16
	case 7:
		playTune(2);
 402:	97 e2       	ldi	r25, 0x27	; 39
 404:	d7 de       	rcall	.-594    	; 0x1b4 <changeToBreakingLight>
		break;
	case 8:
		playTune(2);
 406:	1f c0       	rjmp	.+62     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 408:	82 e0       	ldi	r24, 0x02	; 2
		switchDirection();
 40a:	15 df       	rcall	.-470    	; 0x236 <playTune>
 40c:	1c c0       	rjmp	.+56     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		changeToBreakingLight(65535);
 40e:	82 e0       	ldi	r24, 0x02	; 2
 410:	12 df       	rcall	.-476    	; 0x236 <playTune>
 412:	a2 df       	rcall	.-188    	; 0x358 <switchDirection>
		setSpeed(030, false);
 414:	8f ef       	ldi	r24, 0xFF	; 255
 416:	9f ef       	ldi	r25, 0xFF	; 255
 418:	cd de       	rcall	.-614    	; 0x1b4 <changeToBreakingLight>
	
		
		
		setSpeed(180, true);
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	88 e1       	ldi	r24, 0x18	; 24
 41e:	92 df       	rcall	.-220    	; 0x344 <setSpeed>
 420:	61 e0       	ldi	r22, 0x01	; 1
		changeToBreakingLight(10000);
 422:	84 eb       	ldi	r24, 0xB4	; 180
 424:	8f df       	rcall	.-226    	; 0x344 <setSpeed>
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	97 e2       	ldi	r25, 0x27	; 39
		break;
 42a:	c4 de       	rcall	.-632    	; 0x1b4 <changeToBreakingLight>
		case 9:
		playTune(2);
 42c:	0c c0       	rjmp	.+24     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	02 df       	rcall	.-508    	; 0x236 <playTune>
		break;
 432:	09 c0       	rjmp	.+18     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		case 10:
		playTune(2);
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	ff de       	rcall	.-514    	; 0x236 <playTune>
 438:	06 c0       	rjmp	.+12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		break;
 43a:	83 e0       	ldi	r24, 0x03	; 3
	case 11:
		playTune(3);
 43c:	fc de       	rcall	.-520    	; 0x236 <playTune>
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	80 e0       	ldi	r24, 0x00	; 0
		setSpeed(0, false);
 442:	80 df       	rcall	.-256    	; 0x344 <setSpeed>
 444:	ae de       	rcall	.-676    	; 0x1a2 <turnOffLight>
 446:	2f ef       	ldi	r18, 0xFF	; 255
 448:	84 e3       	ldi	r24, 0x34	; 52
		turnOffLight();
 44a:	9c e0       	ldi	r25, 0x0C	; 12
 44c:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44e:	80 40       	sbci	r24, 0x00	; 0
 450:	90 40       	sbci	r25, 0x00	; 0
 452:	e1 f7       	brne	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
 454:	00 c0       	rjmp	.+0      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 456:	00 00       	nop
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	8c bb       	out	0x1c, r24	; 28
 45c:	8d b3       	in	r24, 0x1d	; 29
 45e:	83 60       	ori	r24, 0x03	; 3
	default:
		break;
}
	// waits to avoid double triggers from left/right
	_delay_ms(250);
	EIFR = 0xFF;
 460:	8d bb       	out	0x1d, r24	; 29
 462:	ff 91       	pop	r31
	EIMSK |= 0b00000011;
 464:	ef 91       	pop	r30
 466:	bf 91       	pop	r27
 468:	af 91       	pop	r26
}
 46a:	9f 91       	pop	r25
 46c:	8f 91       	pop	r24
 46e:	7f 91       	pop	r23
 470:	6f 91       	pop	r22
 472:	5f 91       	pop	r21
 474:	4f 91       	pop	r20
 476:	3f 91       	pop	r19
 478:	2f 91       	pop	r18
 47a:	0f 90       	pop	r0
 47c:	0b be       	out	0x3b, r0	; 59
 47e:	0f 90       	pop	r0
 480:	0f be       	out	0x3f, r0	; 63
 482:	0f 90       	pop	r0
 484:	1f 90       	pop	r1
 486:	18 95       	reti

00000488 <__vector_2>:
 488:	1f 92       	push	r1
 48a:	0f 92       	push	r0
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	0f 92       	push	r0

// ISR on INT1
ISR(INT1_vect)
{
 490:	11 24       	eor	r1, r1
 492:	0b b6       	in	r0, 0x3b	; 59
 494:	0f 92       	push	r0
 496:	2f 93       	push	r18
 498:	3f 93       	push	r19
 49a:	4f 93       	push	r20
 49c:	5f 93       	push	r21
 49e:	6f 93       	push	r22
 4a0:	7f 93       	push	r23
 4a2:	8f 93       	push	r24
 4a4:	9f 93       	push	r25
 4a6:	af 93       	push	r26
 4a8:	bf 93       	push	r27
 4aa:	ef 93       	push	r30
 4ac:	ff 93       	push	r31
	triggers++;
 4ae:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <triggers>
 4b2:	8f 5f       	subi	r24, 0xFF	; 255
 4b4:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <triggers>
	
		switch (triggers)
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	8c 30       	cpi	r24, 0x0C	; 12
 4bc:	91 05       	cpc	r25, r1
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <__vector_2+0x3a>
 4c0:	53 c0       	rjmp	.+166    	; 0x568 <__vector_2+0xe0>
 4c2:	fc 01       	movw	r30, r24
 4c4:	88 27       	eor	r24, r24
 4c6:	e2 58       	subi	r30, 0x82	; 130
 4c8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	17 c1       	rjmp	.+558    	; 0x6fc <__tablejump2__>
		{
			case 0:
			playTune(2);
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	b2 de       	rcall	.-668    	; 0x236 <playTune>
			break;
			case 1:
			playTune(2);
 4d2:	4a c0       	rjmp	.+148    	; 0x568 <__vector_2+0xe0>
 4d4:	82 e0       	ldi	r24, 0x02	; 2
			break;
 4d6:	af de       	rcall	.-674    	; 0x236 <playTune>
			case 2:
			playTune(2);
 4d8:	47 c0       	rjmp	.+142    	; 0x568 <__vector_2+0xe0>
 4da:	82 e0       	ldi	r24, 0x02	; 2
			setSpeed(255, false);
 4dc:	ac de       	rcall	.-680    	; 0x236 <playTune>
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
			break;
			case 3:
			playTune(2);
 4e2:	30 df       	rcall	.-416    	; 0x344 <setSpeed>
 4e4:	41 c0       	rjmp	.+130    	; 0x568 <__vector_2+0xe0>
			setSpeed(10, false);
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	a6 de       	rcall	.-692    	; 0x236 <playTune>
 4ea:	60 e0       	ldi	r22, 0x00	; 0
			break;
 4ec:	8a e0       	ldi	r24, 0x0A	; 10
			case 4:
			playTune(2);
 4ee:	2a df       	rcall	.-428    	; 0x344 <setSpeed>
 4f0:	3b c0       	rjmp	.+118    	; 0x568 <__vector_2+0xe0>
			setSpeed(100, false);
 4f2:	82 e0       	ldi	r24, 0x02	; 2
 4f4:	a0 de       	rcall	.-704    	; 0x236 <playTune>
 4f6:	60 e0       	ldi	r22, 0x00	; 0
			setSpeed(255, true);
 4f8:	84 e6       	ldi	r24, 0x64	; 100
 4fa:	24 df       	rcall	.-440    	; 0x344 <setSpeed>
 4fc:	61 e0       	ldi	r22, 0x01	; 1
			break;
 4fe:	8f ef       	ldi	r24, 0xFF	; 255
			case 5:
			playTune(2);
 500:	21 df       	rcall	.-446    	; 0x344 <setSpeed>
 502:	32 c0       	rjmp	.+100    	; 0x568 <__vector_2+0xe0>
			break;
 504:	82 e0       	ldi	r24, 0x02	; 2
			case 6:
			playTune(2);
 506:	97 de       	rcall	.-722    	; 0x236 <playTune>
 508:	2f c0       	rjmp	.+94     	; 0x568 <__vector_2+0xe0>
			switchDirection();
 50a:	82 e0       	ldi	r24, 0x02	; 2
			changeToBreakingLight(65535);
 50c:	94 de       	rcall	.-728    	; 0x236 <playTune>
 50e:	24 df       	rcall	.-440    	; 0x358 <switchDirection>
 510:	8f ef       	ldi	r24, 0xFF	; 255
			setSpeed(30, false);
 512:	9f ef       	ldi	r25, 0xFF	; 255
 514:	4f de       	rcall	.-866    	; 0x1b4 <changeToBreakingLight>
			
			setSpeed(200, true);
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	8e e1       	ldi	r24, 0x1E	; 30
 51a:	14 df       	rcall	.-472    	; 0x344 <setSpeed>
			changeToBreakingLight(10000);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	88 ec       	ldi	r24, 0xC8	; 200
 520:	11 df       	rcall	.-478    	; 0x344 <setSpeed>
			
			break;
 522:	80 e1       	ldi	r24, 0x10	; 16
			case 7:
			playTune(2);
 524:	97 e2       	ldi	r25, 0x27	; 39
 526:	46 de       	rcall	.-884    	; 0x1b4 <changeToBreakingLight>
			break;
			case 8:
			playTune(2);
 528:	1f c0       	rjmp	.+62     	; 0x568 <__vector_2+0xe0>
 52a:	82 e0       	ldi	r24, 0x02	; 2
			switchDirection();
 52c:	84 de       	rcall	.-760    	; 0x236 <playTune>
 52e:	1c c0       	rjmp	.+56     	; 0x568 <__vector_2+0xe0>
			changeToBreakingLight(65535);
 530:	82 e0       	ldi	r24, 0x02	; 2
 532:	81 de       	rcall	.-766    	; 0x236 <playTune>
 534:	11 df       	rcall	.-478    	; 0x358 <switchDirection>
			setSpeed(030, false);
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	3c de       	rcall	.-904    	; 0x1b4 <changeToBreakingLight>
			
			
			
			setSpeed(180, true);
 53c:	60 e0       	ldi	r22, 0x00	; 0
 53e:	88 e1       	ldi	r24, 0x18	; 24
 540:	01 df       	rcall	.-510    	; 0x344 <setSpeed>
 542:	61 e0       	ldi	r22, 0x01	; 1
			changeToBreakingLight(10000);
 544:	84 eb       	ldi	r24, 0xB4	; 180
 546:	fe de       	rcall	.-516    	; 0x344 <setSpeed>
 548:	80 e1       	ldi	r24, 0x10	; 16
 54a:	97 e2       	ldi	r25, 0x27	; 39
			break;
 54c:	33 de       	rcall	.-922    	; 0x1b4 <changeToBreakingLight>
			case 9:
			playTune(2);
 54e:	0c c0       	rjmp	.+24     	; 0x568 <__vector_2+0xe0>
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	71 de       	rcall	.-798    	; 0x236 <playTune>
			break;
 554:	09 c0       	rjmp	.+18     	; 0x568 <__vector_2+0xe0>
			case 10:
			playTune(2);
 556:	82 e0       	ldi	r24, 0x02	; 2
 558:	6e de       	rcall	.-804    	; 0x236 <playTune>
 55a:	06 c0       	rjmp	.+12     	; 0x568 <__vector_2+0xe0>
			break;
 55c:	83 e0       	ldi	r24, 0x03	; 3
			case 11:
			playTune(3);
 55e:	6b de       	rcall	.-810    	; 0x236 <playTune>
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
			setSpeed(0, false);
 564:	ef de       	rcall	.-546    	; 0x344 <setSpeed>
 566:	1d de       	rcall	.-966    	; 0x1a2 <turnOffLight>
 568:	2f ef       	ldi	r18, 0xFF	; 255
 56a:	84 e3       	ldi	r24, 0x34	; 52
			turnOffLight();
 56c:	9c e0       	ldi	r25, 0x0C	; 12
 56e:	21 50       	subi	r18, 0x01	; 1
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	90 40       	sbci	r25, 0x00	; 0
 574:	e1 f7       	brne	.-8      	; 0x56e <__vector_2+0xe6>
 576:	00 c0       	rjmp	.+0      	; 0x578 <__vector_2+0xf0>
 578:	00 00       	nop
 57a:	8f ef       	ldi	r24, 0xFF	; 255
 57c:	8c bb       	out	0x1c, r24	; 28
 57e:	8d b3       	in	r24, 0x1d	; 29
 580:	83 60       	ori	r24, 0x03	; 3
			default:
			break;
		}
	_delay_ms(250);

	EIFR = 0xFF;
 582:	8d bb       	out	0x1d, r24	; 29
 584:	ff 91       	pop	r31
	EIMSK |= 0b00000011;
 586:	ef 91       	pop	r30
 588:	bf 91       	pop	r27
 58a:	af 91       	pop	r26
}
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	7f 91       	pop	r23
 592:	6f 91       	pop	r22
 594:	5f 91       	pop	r21
 596:	4f 91       	pop	r20
 598:	3f 91       	pop	r19
 59a:	2f 91       	pop	r18
 59c:	0f 90       	pop	r0
 59e:	0b be       	out	0x3b, r0	; 59
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <main>:
 5aa:	78 94       	sei
 5ac:	55 de       	rcall	.-854    	; 0x258 <initMotor>
 5ae:	35 de       	rcall	.-918    	; 0x21a <InitSound>
 5b0:	d1 dd       	rcall	.-1118   	; 0x154 <lightInitiate>
{
	// initializing all software modules
	sei();
	initMotor();
	InitSound();
	lightInitiate();
 5b2:	8f ef       	ldi	r24, 0xFF	; 255
	DDRB = 0xFF;
 5b4:	84 b9       	out	0x04, r24	; 4
 5b6:	11 b8       	out	0x01, r1	; 1
	DDRA = 0;
 5b8:	8f e0       	ldi	r24, 0x0F	; 15

	EICRA = 0b00001111;
 5ba:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7c0069>

	setVolume(30);
 5be:	8e e1       	ldi	r24, 0x1E	; 30
 5c0:	41 de       	rcall	.-894    	; 0x244 <setVolume>
 5c2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <triggers>

	triggers = 0;
 5c6:	00 99       	sbic	0x00, 0	; 0
	while (1)
	{
		if (~PINA & (1 << 0))
 5c8:	fe cf       	rjmp	.-4      	; 0x5c6 <main+0x1c>
		{
			EIMSK |= 0b00000011;
 5ca:	8d b3       	in	r24, 0x1d	; 29
 5cc:	83 60       	ori	r24, 0x03	; 3
			// starts the car by playing the start sound and starting the lights
			turnOnLight();
 5ce:	8d bb       	out	0x1d, r24	; 29
 5d0:	db dd       	rcall	.-1098   	; 0x188 <turnOnLight>
			playTune(1);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	30 de       	rcall	.-928    	; 0x236 <playTune>
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	87 ea       	ldi	r24, 0xA7	; 167
 5da:	91 e6       	ldi	r25, 0x61	; 97
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x32>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x3c>
 5e6:	00 00       	nop
			_delay_ms(2000);
			setSpeed(50, false);
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	82 e3       	ldi	r24, 0x32	; 50
 5ec:	ab de       	rcall	.-682    	; 0x344 <setSpeed>
 5ee:	61 e0       	ldi	r22, 0x01	; 1
			setSpeed(255, true);
 5f0:	8f ef       	ldi	r24, 0xFF	; 255
 5f2:	a8 de       	rcall	.-688    	; 0x344 <setSpeed>
 5f4:	e8 cf       	rjmp	.-48     	; 0x5c6 <main+0x1c>

000005f6 <InitUART>:
 5f6:	cf 92       	push	r12
 5f8:	df 92       	push	r13
  // Wait for new character received
  while ( (UCSR2A & (1<<7)) == 0 )
  {}                        
  // Then return it
  return UDR2;
}
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	8b 01       	movw	r16, r22
 604:	9c 01       	movw	r18, r24
 606:	0c 52       	subi	r16, 0x2C	; 44
 608:	11 40       	sbci	r17, 0x01	; 1
 60a:	21 09       	sbc	r18, r1
 60c:	31 09       	sbc	r19, r1
 60e:	05 3d       	cpi	r16, 0xD5	; 213
 610:	10 4c       	sbci	r17, 0xC0	; 192
 612:	21 40       	sbci	r18, 0x01	; 1
 614:	31 05       	cpc	r19, r1
 616:	08 f0       	brcs	.+2      	; 0x61a <InitUART+0x24>
 618:	41 c0       	rjmp	.+130    	; 0x69c <InitUART+0xa6>
 61a:	45 30       	cpi	r20, 0x05	; 5
 61c:	08 f4       	brcc	.+2      	; 0x620 <InitUART+0x2a>
 61e:	3e c0       	rjmp	.+124    	; 0x69c <InitUART+0xa6>
 620:	49 30       	cpi	r20, 0x09	; 9
 622:	e0 f5       	brcc	.+120    	; 0x69c <InitUART+0xa6>
 624:	20 e2       	ldi	r18, 0x20	; 32
 626:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 62a:	28 e1       	ldi	r18, 0x18	; 24
 62c:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <__TEXT_REGION_LENGTH__+0x7c00d1>
 630:	45 50       	subi	r20, 0x05	; 5
 632:	44 0f       	add	r20, r20
 634:	40 93 d2 00 	sts	0x00D2, r20	; 0x8000d2 <__TEXT_REGION_LENGTH__+0x7c00d2>
 638:	6b 01       	movw	r12, r22
 63a:	7c 01       	movw	r14, r24
 63c:	20 e8       	ldi	r18, 0x80	; 128
 63e:	c2 0e       	add	r12, r18
 640:	24 e8       	ldi	r18, 0x84	; 132
 642:	d2 1e       	adc	r13, r18
 644:	2e e1       	ldi	r18, 0x1E	; 30
 646:	e2 1e       	adc	r14, r18
 648:	f1 1c       	adc	r15, r1
 64a:	cc 0c       	add	r12, r12
 64c:	dd 1c       	adc	r13, r13
 64e:	ee 1c       	adc	r14, r14
 650:	ff 1c       	adc	r15, r15
 652:	cc 0c       	add	r12, r12
 654:	dd 1c       	adc	r13, r13
 656:	ee 1c       	adc	r14, r14
 658:	ff 1c       	adc	r15, r15
 65a:	cc 0c       	add	r12, r12
 65c:	dd 1c       	adc	r13, r13
 65e:	ee 1c       	adc	r14, r14
 660:	ff 1c       	adc	r15, r15
 662:	dc 01       	movw	r26, r24
 664:	cb 01       	movw	r24, r22
 666:	88 0f       	add	r24, r24
 668:	99 1f       	adc	r25, r25
 66a:	aa 1f       	adc	r26, r26
 66c:	bb 1f       	adc	r27, r27
 66e:	88 0f       	add	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	aa 1f       	adc	r26, r26
 674:	bb 1f       	adc	r27, r27
 676:	9c 01       	movw	r18, r24
 678:	ad 01       	movw	r20, r26
 67a:	22 0f       	add	r18, r18
 67c:	33 1f       	adc	r19, r19
 67e:	44 1f       	adc	r20, r20
 680:	55 1f       	adc	r21, r21
 682:	22 0f       	add	r18, r18
 684:	33 1f       	adc	r19, r19
 686:	44 1f       	adc	r20, r20
 688:	55 1f       	adc	r21, r21
 68a:	c7 01       	movw	r24, r14
 68c:	b6 01       	movw	r22, r12
 68e:	14 d0       	rcall	.+40     	; 0x6b8 <__udivmodsi4>
 690:	21 50       	subi	r18, 0x01	; 1
 692:	31 09       	sbc	r19, r1
 694:	30 93 d5 00 	sts	0x00D5, r19	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7c00d5>
 698:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7c00d4>
 69c:	1f 91       	pop	r17
 69e:	0f 91       	pop	r16
 6a0:	ff 90       	pop	r15
 6a2:	ef 90       	pop	r14
 6a4:	df 90       	pop	r13
 6a6:	cf 90       	pop	r12
 6a8:	08 95       	ret

000006aa <SendChar>:
	Tegn : Character for sending. 
*************************************************************************/
void SendChar(char Tegn)
{
  // Wait for transmitter register empty (ready for new character)
  while ( (UCSR2A & (1<<5)) == 0 )
 6aa:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <__TEXT_REGION_LENGTH__+0x7c00d0>
 6ae:	95 ff       	sbrs	r25, 5
 6b0:	fc cf       	rjmp	.-8      	; 0x6aa <SendChar>
  {}
  // Then send the character
  UDR2 = Tegn;
 6b2:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
 6b6:	08 95       	ret

000006b8 <__udivmodsi4>:
 6b8:	a1 e2       	ldi	r26, 0x21	; 33
 6ba:	1a 2e       	mov	r1, r26
 6bc:	aa 1b       	sub	r26, r26
 6be:	bb 1b       	sub	r27, r27
 6c0:	fd 01       	movw	r30, r26
 6c2:	0d c0       	rjmp	.+26     	; 0x6de <__udivmodsi4_ep>

000006c4 <__udivmodsi4_loop>:
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	ee 1f       	adc	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	a2 17       	cp	r26, r18
 6ce:	b3 07       	cpc	r27, r19
 6d0:	e4 07       	cpc	r30, r20
 6d2:	f5 07       	cpc	r31, r21
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__udivmodsi4_ep>
 6d6:	a2 1b       	sub	r26, r18
 6d8:	b3 0b       	sbc	r27, r19
 6da:	e4 0b       	sbc	r30, r20
 6dc:	f5 0b       	sbc	r31, r21

000006de <__udivmodsi4_ep>:
 6de:	66 1f       	adc	r22, r22
 6e0:	77 1f       	adc	r23, r23
 6e2:	88 1f       	adc	r24, r24
 6e4:	99 1f       	adc	r25, r25
 6e6:	1a 94       	dec	r1
 6e8:	69 f7       	brne	.-38     	; 0x6c4 <__udivmodsi4_loop>
 6ea:	60 95       	com	r22
 6ec:	70 95       	com	r23
 6ee:	80 95       	com	r24
 6f0:	90 95       	com	r25
 6f2:	9b 01       	movw	r18, r22
 6f4:	ac 01       	movw	r20, r24
 6f6:	bd 01       	movw	r22, r26
 6f8:	cf 01       	movw	r24, r30
 6fa:	08 95       	ret

000006fc <__tablejump2__>:
 6fc:	ee 0f       	add	r30, r30
 6fe:	ff 1f       	adc	r31, r31
 700:	88 1f       	adc	r24, r24
 702:	8b bf       	out	0x3b, r24	; 59
 704:	07 90       	elpm	r0, Z+
 706:	f6 91       	elpm	r31, Z
 708:	e0 2d       	mov	r30, r0
 70a:	19 94       	eijmp

0000070c <_exit>:
 70c:	f8 94       	cli

0000070e <__stop_program>:
 70e:	ff cf       	rjmp	.-2      	; 0x70e <__stop_program>
